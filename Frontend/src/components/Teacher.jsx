/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 teacher.gltf
Author: LasquetiSpice (https://sketchfab.com/LasquetiSpice)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/animated-female-teacher-for-narration-2b24fd414b9a4fbb9ffb5ffdd4e6a4e5
Title: Animated Female Teacher for Narration
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useSpeechSynthesis } from 'react-speech-kit'
import { act, useFrame } from '@react-three/fiber'

export default function Model(props) {
  // console.log("Inside Teacher", props.teacherActions)
  const [talk, setTalk] = useState(true)
  const [listen, setListen] = useState(false)
  const [timeCount, setTimeCount] = useState(0)
  let {speak, cancel} = useSpeechSynthesis()

  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/teacher.gltf')
  const { actions } = useAnimations(animations, group)
  props.setTeacherActions(actions);

  if(props.teacherActions != null){
    // console.log("inside useeffect")
    props.teacherActions.Animation.play()
    const timer = setTimeout(() => {
      actions.Animation.halt()
    }, 1); 
    clearTimeout(timer);
  }

  // useEffect(()=>{
  //   cancel()
  
  //   console.log("Response from teacher. jsx:", (props.speechText))
  //   speak({text: props.speechText})
  //   if (props.speechText != ""){
  //     props.teacherActions.Animation.stop()
  //     props.teacherActions.Animation.play()
    
  //   // setTimeCount(0)

  //   // To solve the issue of stopping after 14 seconds, which is a bug in browser
  //   let r = setInterval(() => {
  //     // console.log(speechSynthesis.speaking);
  //     if (!speechSynthesis.speaking) {
  //       clearInterval(r);
  //     } else {
  //       speechSynthesis.pause();
  //       speechSynthesis.resume();
  //     }
  //   }, 14000);
  // } 
    
  // }, [props.speechText])

  useEffect(() => {
    // Declare intervalId at the top of useEffect
    let intervalId;
  
    // Function to start speaking
    const speakText = () => {
      const utterance = new SpeechSynthesisUtterance(props.speechText);
      utterance.onend = () => {
        props.teacherActions.Animation.halt(); // Halt animation when speech ends
        clearInterval(intervalId); // Clear the interval when speech ends
      };
      speechSynthesis.speak(utterance);
    };
  
    // Cancel any ongoing speech to prevent overlaps
    speechSynthesis.cancel();
  
    // Check if there's text to speak
    if (props.speechText) {
      console.log("Response from teacher.jsx:", props.speechText);
      props.teacherActions.Animation.stop();
      props.teacherActions.Animation.play();
  
      // Start speaking
      speakText();
  
      // Handle the bug of stopping after 14 seconds
      intervalId = setInterval(() => {
        if (speechSynthesis.speaking) {
          speechSynthesis.pause();
          speechSynthesis.resume();
        }
      }, 14000);
    }
  
  }, [props.speechText]);
  
  

  // useFrame((state, delta)=>{
  //   setTimeCount(timeCount + 1)
  //   if (timeCount > 40000) {
  //     actions.Animation.halt()
  //   }
  // })

  // To alter the default position of teacher
  // useEffect(() => {
  //   console.log("props", props)
  //   if(props.teacherActions != null){
  //     console.log("inside useeffect")
  //     props.teacherActions.Animation.play()
  //     const timer = setTimeout(() => {
  //       actions.Animation.halt()
  //     }, 1); 
  //     return () => clearTimeout(timer);
  //   }
  // } ,[props.teacherActions]);
  

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={1.08}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group  name="Female_Teacher_01_68">
                <group  name="Female_Teacher_01_Skeleton_67">
                  <group  name="GLTF_created_0">
                    <primitive  object={nodes.GLTF_created_0_rootJoint} />
                    <group  name="Wolf3D_Avatar_69" />
                    <skinnedMesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials.Wolf3D_Avatar} skeleton={nodes.Object_8.skeleton} />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/teacher.gltf')

  // useEffect(() => {
  //   console.log("inside1");
  //   actions.CC3_Base_Plus_TempMotion.play();
  //   // Schedule the stop action after 10ms
  //   const timer = setTimeout(() => {
  //     actions.CC3_Base_Plus_TempMotion.halt()

  //   }, 100); // 10 milliseconds
  
  //   // Clear the timeout if the component unmounts before the timeout is reached
  //   return () => clearTimeout(timer);
  // }, );
